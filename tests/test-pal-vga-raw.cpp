/**
 * @file   test-pal-vga-raw.cpp
 * @brief  Test code for reading raw VGA 6-bit palette files.
 *
 * Copyright (C) 2010-2015 Adam Nielsen <malvineous@shikadi.net>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "test-image.hpp"

class test_pal_vga_raw: public test_image
{
	public:
		test_pal_vga_raw()
		{
			this->type = "pal-vga-raw";
			this->hasMask = false;
			this->hasHitmask = false;
			this->dimensions = {0, 0};

			// 6-bit palettes are valid 8-bit ones
			this->skipInstDetect.push_back("pal-vga-raw8");
		}

		void addTests()
		{
			this->test_image::addTests();

			this->sizedContent({0, 0}, ImageType::DefinitelyYes,
				this->initialstate(), createPalette_DefaultVGA());

			// c00: Initial state
			this->isInstance(ImageType::DefinitelyYes, this->initialstate());

			// c01: Wrong size
			this->isInstance(ImageType::DefinitelyNo, this->initialstate() + "test");

			// c02: Palette entry out of range
			auto c02 = this->initialstate();
			c02[0] = 0x41;
			this->isInstance(ImageType::DefinitelyNo, c02);
		}

		virtual std::string initialstate() const
		{
			return STRING_WITH_NULLS(
				// 0
				"\x00\x00\x00"
				"\x00\x00\x2A"
				"\x00\x2A\x00"
				"\x00\x2A\x2A"
				"\x2A\x00\x00"
				"\x2A\x00\x2A"
				"\x2A\x15\x00"
				"\x2A\x2A\x2A"
				"\x15\x15\x15"
				"\x15\x15\x3F"
				"\x15\x3F\x15"
				"\x15\x3F\x3F"
				"\x3F\x15\x15"
				"\x3F\x15\x3F"
				"\x3F\x3F\x15"
				"\x3F\x3F\x3F"
				// 16
				"\x00\x00\x00"
				"\x05\x05\x05"
				"\x08\x08\x08"
				"\x0B\x0B\x0B"
				"\x0E\x0E\x0E"
				"\x11\x11\x11"
				"\x14\x14\x14"
				"\x18\x18\x18"
				"\x1C\x1C\x1C"
				"\x20\x20\x20"
				"\x24\x24\x24"
				"\x28\x28\x28"
				"\x2D\x2D\x2D"
				"\x32\x32\x32"
				"\x38\x38\x38"
				"\x3F\x3F\x3F"
				// 32
				"\x00\x00\x3F"
				"\x10\x00\x3F"
				"\x1F\x00\x3F"
				"\x2F\x00\x3F"
				"\x3F\x00\x3F"
				"\x3F\x00\x2F"
				"\x3F\x00\x1F"
				"\x3F\x00\x10"
				"\x3F\x00\x00"
				"\x3F\x10\x00"
				"\x3F\x1F\x00"
				"\x3F\x2F\x00"
				"\x3F\x3F\x00"
				"\x2F\x3F\x00"
				"\x1F\x3F\x00"
				"\x10\x3F\x00"
				// 48
				"\x00\x3F\x00"
				"\x00\x3F\x10"
				"\x00\x3F\x1F"
				"\x00\x3F\x2F"
				"\x00\x3F\x3F"
				"\x00\x2F\x3F"
				"\x00\x1F\x3F"
				"\x00\x10\x3F"
				"\x1F\x1F\x3F"
				"\x27\x1F\x3F"
				"\x2F\x1F\x3F"
				"\x37\x1F\x3F"
				"\x3F\x1F\x3F"
				"\x3F\x1F\x37"
				"\x3F\x1F\x2F"
				"\x3F\x1F\x27"
				// 64
				"\x3F\x1F\x1F"
				"\x3F\x27\x1F"
				"\x3F\x2F\x1F"
				"\x3F\x37\x1F"
				"\x3F\x3F\x1F"
				"\x37\x3F\x1F"
				"\x2F\x3F\x1F"
				"\x27\x3F\x1F"
				"\x1F\x3F\x1F"
				"\x1F\x3F\x27"
				"\x1F\x3F\x2F"
				"\x1F\x3F\x37"
				"\x1F\x3F\x3F"
				"\x1F\x37\x3F"
				"\x1F\x2F\x3F"
				"\x1F\x27\x3F"
				// 80
				"\x2D\x2D\x3F"
				"\x31\x2D\x3F"
				"\x36\x2D\x3F"
				"\x3A\x2D\x3F"
				"\x3F\x2D\x3F"
				"\x3F\x2D\x3A"
				"\x3F\x2D\x36"
				"\x3F\x2D\x31"
				"\x3F\x2D\x2D"
				"\x3F\x31\x2D"
				"\x3F\x36\x2D"
				"\x3F\x3A\x2D"
				"\x3F\x3F\x2D"
				"\x3A\x3F\x2D"
				"\x36\x3F\x2D"
				"\x31\x3F\x2D"
				// 96
				"\x2D\x3F\x2D"
				"\x2D\x3F\x31"
				"\x2D\x3F\x36"
				"\x2D\x3F\x3A"
				"\x2D\x3F\x3F"
				"\x2D\x3A\x3F"
				"\x2D\x36\x3F"
				"\x2D\x31\x3F"
				"\x00\x00\x1C"
				"\x07\x00\x1C"
				"\x0E\x00\x1C"
				"\x15\x00\x1C"
				"\x1C\x00\x1C"
				"\x1C\x00\x15"
				"\x1C\x00\x0E"
				"\x1C\x00\x07"
				// 112
				"\x1C\x00\x00"
				"\x1C\x07\x00"
				"\x1C\x0E\x00"
				"\x1C\x15\x00"
				"\x1C\x1C\x00"
				"\x15\x1C\x00"
				"\x0E\x1C\x00"
				"\x07\x1C\x00"
				"\x00\x1C\x00"
				"\x00\x1C\x07"
				"\x00\x1C\x0E"
				"\x00\x1C\x15"
				"\x00\x1C\x1C"
				"\x00\x15\x1C"
				"\x00\x0E\x1C"
				"\x00\x07\x1C"
				// 128
				"\x0E\x0E\x1C"
				"\x11\x0E\x1C"
				"\x15\x0E\x1C"
				"\x18\x0E\x1C"
				"\x1C\x0E\x1C"
				"\x1C\x0E\x18"
				"\x1C\x0E\x15"
				"\x1C\x0E\x11"
				"\x1C\x0E\x0E"
				"\x1C\x11\x0E"
				"\x1C\x15\x0E"
				"\x1C\x18\x0E"
				"\x1C\x1C\x0E"
				"\x18\x1C\x0E"
				"\x15\x1C\x0E"
				"\x11\x1C\x0E"
				// 144
				"\x0E\x1C\x0E"
				"\x0E\x1C\x11"
				"\x0E\x1C\x15"
				"\x0E\x1C\x18"
				"\x0E\x1C\x1C"
				"\x0E\x18\x1C"
				"\x0E\x15\x1C"
				"\x0E\x11\x1C"
				"\x14\x14\x1C"
				"\x16\x14\x1C"
				"\x18\x14\x1C"
				"\x1A\x14\x1C"
				"\x1C\x14\x1C"
				"\x1C\x14\x1A"
				"\x1C\x14\x18"
				"\x1C\x14\x16"
				// 160
				"\x1C\x14\x14"
				"\x1C\x16\x14"
				"\x1C\x18\x14"
				"\x1C\x1A\x14"
				"\x1C\x1C\x14"
				"\x1A\x1C\x14"
				"\x18\x1C\x14"
				"\x16\x1C\x14"
				"\x14\x1C\x14"
				"\x14\x1C\x16"
				"\x14\x1C\x18"
				"\x14\x1C\x1A"
				"\x14\x1C\x1C"
				"\x14\x1A\x1C"
				"\x14\x18\x1C"
				"\x14\x16\x1C"
				// 176
				"\x00\x00\x10"
				"\x04\x00\x10"
				"\x08\x00\x10"
				"\x0C\x00\x10"
				"\x10\x00\x10"
				"\x10\x00\x0C"
				"\x10\x00\x08"
				"\x10\x00\x04"
				"\x10\x00\x00"
				"\x10\x04\x00"
				"\x10\x08\x00"
				"\x10\x0C\x00"
				"\x10\x10\x00"
				"\x0C\x10\x00"
				"\x08\x10\x00"
				"\x04\x10\x00"
				// 192
				"\x00\x10\x00"
				"\x00\x10\x04"
				"\x00\x10\x08"
				"\x00\x10\x0C"
				"\x00\x10\x10"
				"\x00\x0C\x10"
				"\x00\x08\x10"
				"\x00\x04\x10"
				"\x08\x08\x10"
				"\x0A\x08\x10"
				"\x0C\x08\x10"
				"\x0E\x08\x10"
				"\x10\x08\x10"
				"\x10\x08\x0E"
				"\x10\x08\x0C"
				"\x10\x08\x0A"
				// 208
				"\x10\x08\x08"
				"\x10\x0A\x08"
				"\x10\x0C\x08"
				"\x10\x0E\x08"
				"\x10\x10\x08"
				"\x0E\x10\x08"
				"\x0C\x10\x08"
				"\x0A\x10\x08"
				"\x08\x10\x08"
				"\x08\x10\x0A"
				"\x08\x10\x0C"
				"\x08\x10\x0E"
				"\x08\x10\x10"
				"\x08\x0E\x10"
				"\x08\x0C\x10"
				"\x08\x0A\x10"
				// 224
				"\x0B\x0B\x10"
				"\x0C\x0B\x10"
				"\x0D\x0B\x10"
				"\x0F\x0B\x10"
				"\x10\x0B\x10"
				"\x10\x0B\x0F"
				"\x10\x0B\x0D"
				"\x10\x0B\x0C"
				"\x10\x0B\x0B"
				"\x10\x0C\x0B"
				"\x10\x0D\x0B"
				"\x10\x0F\x0B"
				"\x10\x10\x0B"
				"\x0F\x10\x0B"
				"\x0D\x10\x0B"
				"\x0C\x10\x0B"
				// 240
				"\x0B\x10\x0B"
				"\x0B\x10\x0C"
				"\x0B\x10\x0D"
				"\x0B\x10\x0F"
				"\x0B\x10\x10"
				"\x0B\x0F\x10"
				"\x0B\x0D\x10"
				"\x0B\x0C\x10"
				"\x00\x00\x00"
				"\x00\x00\x00"
				"\x00\x00\x00"
				"\x00\x00\x00"
				"\x00\x00\x00"
				"\x00\x00\x00"
				"\x00\x00\x00"
				"\x00\x00\x00"
				// 256
			);
		}

		/// Test that palette values larger than 0x3F get written as 0x3F
};

IMPLEMENT_TESTS(pal_vga_raw);
